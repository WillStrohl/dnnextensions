<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="dlInjection.Header.Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="dlInjection.Header.InjectType" xml:space="preserve">
    <value>Injection Type</value>
  </data>
  <data name="dlInjection.Header.Move" xml:space="preserve">
    <value>Move Up/Down</value>
  </data>
  <data name="dlInjection.Header.Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;div class="Normal"&gt;
&lt;h1&gt;WillStrohl.Injection Module&lt;/h1&gt;
&lt;p&gt;The WillStrohl.Injection Module allows you to inject various items into the HTML markup of a DotNetNuke web page. This content could be client-side scripts and SCRIPT tags, HTML comments, and more.&lt;/p&gt;
&lt;h2&gt;Minimum System Requirements:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;DotNetNuke version:&lt;/strong&gt; 4.06.02&lt;br /&gt;
&lt;strong&gt;SQL Server version:&lt;/strong&gt; 2000&lt;br /&gt;
&lt;strong&gt;.Net Framework version:&lt;/strong&gt; 2.0&lt;br /&gt;&lt;/p&gt;
&lt;h1&gt;Add New Injection&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Click the 'Add New Injection' link.&lt;/li&gt;
&lt;li&gt;Enter the name of the injection (used only for editing)&lt;/li&gt;
&lt;li&gt;Enter the Content to inject. This can be anything. It can be simple text, or HTML content.&lt;/li&gt;
&lt;li&gt;Select whether you want the content to be injected into the top or bottom of the HTML markup.&lt;/li&gt;
&lt;li&gt;Check the checkbox if you want the content to be enabled. This is the only way it will be injected into the page.&lt;/li&gt;
&lt;li&gt;Click the 'Submit' link to save your injection content.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Edit Injection Content&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Click the pencil icon on the right side of the injection record in the list view.&lt;/li&gt;
&lt;li&gt;Fill in the form fields like you did when you added it.&lt;/li&gt;
&lt;li&gt;Click the 'Submit' link to save your changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Disable Injection Content&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Click the pencil icon to edit the injection record.&lt;/li&gt;
&lt;li&gt;Uncheck the 'Enabled' checkbox to disable the injection content.&lt;/li&gt;
&lt;li&gt;Click the 'Submit' link to save your change.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Delete Injection Content&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Click the red X on the right side of the injection record in the list view.&lt;/li&gt;
&lt;li&gt;Click OK to confirm your deletion request.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Example Content Injections:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jQuery:&lt;/strong&gt;&lt;br /&gt; &amp;lt;script language="javascript" type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HTML Comments:&lt;/strong&gt;&lt;br /&gt; &amp;lt;-- Website Author: Will Strohl (will.strohl@gmail.com) --&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Analytics:&lt;/strong&gt;&lt;br /&gt; &amp;lt;script language="javascript" type="text/javascript" src="http://www.google-analytics.com/urchin.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script language="javascript" type="text/javascript"&amp;gt; _uacct = "UA-1234567-1"; urchinTracker(); &amp;lt;/script&amp;gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Quantcast:&lt;/strong&gt;&lt;br /&gt; &amp;lt;script language="javascript" type="text/javascript"&amp;gt;
var typeHost = (('https:' == document.location.protocol) ? 'https://secure.' : 'http://edge.');
document.write(unescape('%3Cscript language="javascript" type="text/javascript" src="' + typeHost + 'quantserve.com/quant.js"%3E%3C/script%3E'));
&amp;lt;/script&amp;gt;
&amp;lt;script language="javascript" type="text/javascript"&amp;gt; _qacct='p-112bh3j1hb11b'; quantserve(); &amp;lt;/script&amp;gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Release Notes:&lt;/h1&gt;
&lt;h2&gt;Version 1.00.00&lt;/h2&gt;
&lt;p&gt;There are some known issues/bugs with the current release of the module.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Move Up/Move Down are not yet enabled&lt;/li&gt;
&lt;li&gt;JavaScript confirm does not always occur when deleting injection records&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Injection Name</value>
  </data>
  <data name="lblInject.Text" xml:space="preserve">
    <value>Inject Where</value>
  </data>
  <data name="lblContent.Text" xml:space="preserve">
    <value>Content to Inject</value>
  </data>
  <data name="Delete.Confirm" xml:space="preserve">
    <value>Are you sure that you want to delete this injection item?</value>
  </data>
  <data name="lnkAdd.Text" xml:space="preserve">
    <value>Add New Injection</value>
  </data>
  <data name="radInject.0.Text" xml:space="preserve">
    <value>Top of Page</value>
  </data>
  <data name="radInject.1.Text" xml:space="preserve">
    <value>Bottom of Page</value>
  </data>
  <data name="lblNoRecords.Text" xml:space="preserve">
    <value>&lt;p class="Normal"&gt;No injection records were found.&lt;/p&gt;</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Manage Content Injections</value>
  </data>
  <data name="cmdAdd.Text" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="cmdReturn.Text" xml:space="preserve">
    <value>Return</value>
  </data>
  <data name="lblEnabled.Text" xml:space="preserve">
    <value>Enabled?</value>
  </data>
  <data name="rfvContent.ErrorMessage" xml:space="preserve">
    <value>Please enter some content for the Injection</value>
  </data>
  <data name="rfvName.ErrorMessage" xml:space="preserve">
    <value>Please enter a name for the Injection you are managing</value>
  </data>
  <data name="cvName.ErrorMessage" xml:space="preserve">
    <value>The name you chose is already used in this module. Please enter a unque name.</value>
  </data>
  <data name="Disabled.Alt" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="Enabled.Alt" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="dlInjection.Header.Enabled" xml:space="preserve">
    <value>Enabled?</value>
  </data>
  <data name="Injection.Text" xml:space="preserve">
    <value>Manage Injection</value>
  </data>
  <data name="lblContent.Help" xml:space="preserve">
    <value>Enter the content that you want to be injected into the page. JS/CSS: Any valid local and external file path for your JS/CSS file is acceptable (e.g., a local script, one in a CDN, etc.). HTML: Any valid HTML is acceptable. Please triple-check your HTML before saving/enabling the content injection.</value>
  </data>
  <data name="lblEnabled.Help" xml:space="preserve">
    <value>Choose whether this content injection item should be enabled. If unchecked, the item will not be injected into the page.</value>
  </data>
  <data name="lblInject.Help" xml:space="preserve">
    <value>Specify where in the page that you want to inject the content.</value>
  </data>
  <data name="lblName.Help" xml:space="preserve">
    <value>Enter a name for the injection. This should be short, but clearly describe what the injection does.</value>
  </data>
  <data name="cmdDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="cvContent.ErrorMessage" xml:space="preserve">
    <value>The content you are trying to inject should only be the path of the JavaScript or CSS file.</value>
  </data>
  <data name="lblType.Help" xml:space="preserve">
    <value>Choose the type of injection you are adding, either free-form HTML, or a JS/CSS script file path.</value>
  </data>
  <data name="lblType.Text" xml:space="preserve">
    <value>Injection Type</value>
  </data>
  <data name="radType.0.Text" xml:space="preserve">
    <value>JavaScript/CSS</value>
  </data>
  <data name="radType.1.Text" xml:space="preserve">
    <value>HTML</value>
  </data>
  <data name="Advanced.Text" xml:space="preserve">
    <value>Advanced Settings</value>
  </data>
  <data name="ddlCrmProvider.0.Text" xml:space="preserve">
    <value>None Specified</value>
  </data>
  <data name="ddlCrmProvider.1.Text" xml:space="preserve">
    <value>Page Header</value>
  </data>
  <data name="ddlCrmProvider.2.Text" xml:space="preserve">
    <value>Body</value>
  </data>
  <data name="ddlCrmProvider.3.Text" xml:space="preserve">
    <value>Form Bottom</value>
  </data>
  <data name="lblCrmPriority.Help" xml:space="preserve">
    <value>Enter a numeric value for the priority level in the Client Resource Manager.</value>
  </data>
  <data name="lblCrmPriority.Text" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="lblCrmProvider.Help" xml:space="preserve">
    <value>Choose the provider you wish to use to inject the CSS/JavaScript you've specified. If no choice is made, CSS will be injected into the Page Header, and the JavaScript will be injected in the Form Bottom.&lt;br /&gt;
&lt;strong&gt;Page Header&lt;/strong&gt; - adds the file to a specific location within the head&lt;br/&gt;
&lt;strong&gt;Body&lt;/strong&gt; - adds the file to the top of the body&lt;br/&gt;
&lt;strong&gt;Form Bottom&lt;/strong&gt; - adds the file to the bottom of the body</value>
  </data>
  <data name="lblCrmProvider.Text" xml:space="preserve">
    <value>Provider</value>
  </data>
  <data name="rvCrmPriority.ErrorMessage" xml:space="preserve">
    <value>The priority level can only be a number, between 0-1000.</value>
  </data>
  <data name="PriorityInfo.Text" xml:space="preserve">
    <value>The following priorities are built-in.  You should choose a priority that isn't currently being used.&lt;br /&gt;&lt;br /&gt;
&lt;div class="dnnClear" style="width:100%;"&gt;
&lt;div class="dnnLeft"&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;jQuery: 5&lt;/li&gt;
&lt;li&gt;jQuery UI: 10&lt;/li&gt;
&lt;li&gt;DnnXml: 15&lt;/li&gt;
&lt;li&gt;DnnXmlJsParser: 20&lt;/li&gt;
&lt;li&gt;DnnXmlHttp: 25&lt;/li&gt;
&lt;li&gt;DnnXmlHttpJsXmlHttpRequest: 30&lt;/li&gt;
&lt;li&gt;DnnDomPositioning: 35&lt;/li&gt;
&lt;li&gt;DnnControls: 40&lt;/li&gt;
&lt;li&gt;DnnControlsLabelEdit: 45&lt;/li&gt;
&lt;li&gt;Default: 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="dnnRight"&gt;
&lt;strong&gt;CSS&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Default CSS: 5&lt;/li&gt;
&lt;li&gt;Module CSS: 10&lt;/li&gt;
&lt;li&gt;Skin CSS: 15&lt;/li&gt;
&lt;li&gt;Specific Skin CSS: 20&lt;/li&gt;
&lt;li&gt;Container CSS: 25&lt;/li&gt;
&lt;li&gt;Specific Container CSS: 30&lt;/li&gt;
&lt;li&gt;Portal CSS: 35&lt;/li&gt;
&lt;li&gt;DnnControls: 40&lt;/li&gt;
&lt;li&gt;DnnControlsLabelEdit: 45&lt;/li&gt;
&lt;li&gt;Default: 100&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</value>
  </data>
  <data name="CSS.Text" xml:space="preserve">
    <value>CSS &gt; </value>
  </data>
  <data name="DnnBodyProvider.Text" xml:space="preserve">
    <value>Body</value>
  </data>
  <data name="DnnFormBottomProvider.Text" xml:space="preserve">
    <value>Form Bottom</value>
  </data>
  <data name="DnnPageHeaderProvider.Text" xml:space="preserve">
    <value>Page Header</value>
  </data>
  <data name="HtmlBottom.Text" xml:space="preserve">
    <value>HTML &gt; Bottom of Page</value>
  </data>
  <data name="HtmlTop.Text" xml:space="preserve">
    <value>HTML &gt; Top of Page</value>
  </data>
  <data name="JavaScript.Text" xml:space="preserve">
    <value>JavaScript &gt; </value>
  </data>
  <data name="lblAudit.Text" xml:space="preserve">
    <value>Last updated by &lt;strong&gt;{0}&lt;/strong&gt; on &lt;strong&gt;{1}&lt;/strong&gt;. </value>
  </data>
  <data name="Html.Placeholder" xml:space="preserve">
    <value>&lt;!-- Enter any valid HTML you wish. --&gt;</value>
  </data>
  <data name="Script.Placeholder" xml:space="preserve">
    <value>/full/path/to/my/script-or-css-file.js</value>
  </data>
</root>